#include "main.h"
/**
 * main - program execution
 * Return: 0 (Succes)
 */
int main(void)
{
        _putchar('_');
        _putchar('p');
        _putchar('u');
        _putchar('t');
        _putchar('c');
        _putchar('h');
        _putchar('a');
        _putchar('r');
        _putchar('\n');
        return (0);
}

#include "main.h"

/**
 * _isupper - checks if character is uppercase
 * @c: ascii code reference
 * Return: 1 if uppercase and 0 if otherwise
 */

int _isupper(int c)
{
        if (c >= 65 && c <= 90)
        {
                return (1);
        }
        else
        {
                return (0);
        }
}

#include "main.h"

/**
 * _islower - prints if letter is lowercase
 * @c: ASCII code referrer
 * Return: Always 0.
 */
int _islower(int c)
{
        if (c >= 97 && c <= 122)
        {
                return (1);
        }
        else
        {
                return (0);
        }
        _putchar('\n');
}

#include "main.h"

/**
 * _isalpha - checks if letter is upper or lowercase
 * @c: reference to the ascii code
 * Return: 1 (Yes) 0 (No)
 */
int _isalpha(int c)
{
        if ((c >= 97 && c <= 122) || (c >= 65 && c <= 90))
        {
                return (1);
        }
        else
        {
                return (0);
        }
        _putchar('\n');
}

#include "main.h"
/**
 * _abs - computes the absolute value of an integer.
 * @i: integer input
 * Return: 0 (Success)
 */
int _abs(int i)
{
        if (i >= 0)
        {
                return (i);
        }
        else
        {
                return (i * -1);
        }
}


#include "main.h"
/**
 * _isdigit - checks if character is a digit
 * @c: ascii reference
 * Return: 1 if c is a digit and 0 if otherwise
 */

int _isdigit(int c)
{
        if (c >= 48 && c <= 57)
        {
                return (1);
        }
        else
        {
                return (0);
        }
}

#include "main.h"
/**
 * _strlen - returns the length of a string
 * @s: string
 * Return: length
 */
int _strlen(char *s)
{
        int a = 0;

        while (*s != '\0')
        {
                a++;
                s++;
        }

        return (a);
}

#include "main.h"

/**
 * _puts - prints a string, followed by a new line, to stdout
 * @str: string to print
 */

void _puts(char *str)
{
        while (*str != '\0')
        {
                _putchar(*str++);
        }
                _putchar('\n');
}

#include "main.h"

/**
 * char *_strcpy - a function that copies the string pointed to by src
 * @dest: copy to
 * @src: copy from
 * Return: string
 */
char *_strcpy(char *dest, char *src)
{
        int a = 0;
        int b = 0;

        while (*(src + a) != '\0')
        {
                a++;
        }
        for ( ; b < a ; b++)
        {
                dest[b] = src[b];
        }
        dest[a] = '\0';
        return (dest);
}

#include "main.h"

/**
 * _atoi - converts a string to an integer
 * @s: string to be converted
 * 
 * Return: the int converted from the string
 */ 
int _atoi(char *s)
{       
        int i, d, n, len, f, digit;
        
        i = 0;
        d = 0;
        n = 0;
        len = 0;
        f = 0;
        digit = 0;
        
        while (s[len] != '\0')
                len++;
        
        while (i < len && f == 0)
        {       
                if (s[i] == '-')
                        ++d;
                
                if (s[i] >= '0' && s[i] <= '9')
                {       
                        digit = s[i] - '0';
                        if (d % 2)
                                digit = -digit;
                        n = n * 10 + digit;
                        f = 1;
                        if (s[i + 1] < '0' || s[i + 1] > '9')
                                break;
                        f = 0;
                }
                i++;
        }

        if (f == 0)
                return (0);

        return (n);
}

#include "main.h"
/**
 * _strcat - concatenates two strings.
 * @dest: string one
 * @src: string two
 * Return: pointer to dest
 */
char *_strcat(char *dest, char *src)
{
        int a;
        int b;

        a = 0;
        while (dest[a] != '\0')
        {
                a++;
        }
        b = 0;
        while (src[b] != '\0')
        {
                dest[a] = src[b];
                a++;
                b++;
        }
        dest[a] = '\0';
        return (dest);
}

#include "main.h"
/**
 * _strncat - concatenate two strings
 * using at most n bytes from src
 * @dest: string one
 * @src: string two
 * @n: input
 * Return: pointer to dest(resulting string)
 */
char *_strncat(char *dest, char *src, int n)
{
        int i;
        int j;

        i = 0;
        while (dest[i] != '\0')
        {
                i++;
        }
        j = 0;
        while (j < n && src[j] != '\0')
        {
        dest[i] = src[j];
        i++;
        j++;
        }
        dest[i] = '\0';
        return (dest);
}

#include "main.h"
/**
 * _strncpy - copieas a string
 * @dest: input
 * @src: input
 * @n: input
 * Return: dest
 */

char *_strncpy(char *dest, char *src, int n)
{
        int j;

        j = 0;
        while (j < n && src[j] != '\0')
        {
                dest[j] = src[j];
                j++;
        }
        while (j < n)
        {
                dest[j] = '\0';
                j++;
        }

        return (dest);
}

#include "main.h"
/**
 * _strcmp - compares string values
 * @s1: input value
 * @s2: input value
 * Return: s1[a] - s2[a]
 */
int _strcmp(char *s1, char *s2)
{
        int a;

        a = 0;
        while (s1[a] != '\0' && s2[a] != '\0')
        {
                if (s1[a] != s2[a])
                {
                        return (s1[a] - s2[a]);
                }
                a++;
        }
        return (0);
}

#include "main.h"
/**
 * _memset - fill a block of memory with a specific value
 * @s: starting address of memory to be filled
 * @b: the desired value
 * @n: number of bytes to be changed
 *
 * Return: changed array with new value for n bytes
 */
char *_memset(char *s, char b, unsigned int n)
{
        int a = 0;

        for (; n > 0; a++)
        {
                s[a] = b;
                n--;
        }
        return (s);
}

#include "main.h"
/**
 *_memcpy - a function that copies memory area
 *@dest: memory where is stored
 *@src: memory where is copied
 *@n: number of bytes
 *
 *Return: copied memory with n bytes changed
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
        int a = 0;
        int b = n;

        for (; a < b; a++)
        {
                dest[a] = src[a];
                n--;
        }
        return (dest);
}

#include "main.h"
/**
 * _strchr - Entry point
 * @s: input
 * @c: input
 * Return: Always 0 (Success)
 */
char *_strchr(char *s, char c)
{
        int a = 0;

        for (; s[a] >= '\0'; a++)
        {
                if (s[a] == c)
                        return (&s[a]);
        }
        return (0);
}

#include "main.h"
/**
 * _strspn - Entry point
 * @s: input
 * @accept: input
 * Return: Always 0 (Success)
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int n = 0;
	int a;


	while (*s)
	{
		for (a = 0; accept[a]; a++)
		{
			if (*s == accept[a])
			{
				n++;
				break;
			}
			else if (accept[a + 1] == '\0')
				return (n);
		}
		s++;
	}
	return (n);
}

#include "main.h"
/**
 * _strpbrk - Entry point
 * @s: input
 * @accept: input
 * Return: Always 0 (Success)
 */
char *_strpbrk(char *s, char *accept)
{
	int ef;


	while (*s)
	{
		for (ef = 0; accept[ef]; ef++)
		{
		if (*s == accept[ef])
		return (s);
		}
	s++;
	}


return ('\0');
}

#include "main.h"
/**
 * _strstr - Entry point
 * @haystack: input
 * @needle: input
 * Return: Always 0 (Success)
 */
char *_strstr(char *haystack, char *needle)
{
	for (; *haystack != '\0'; haystack++)
	{
		char *a = haystack;
		char *b = needle;


		while (*a == *b && *b != '\0')
		{
			a++;
			b++;
		}


		if (*b == '\0')
			return (haystack);
	}


	return (0);
}
